1. My Each
# Extend the Array class to include a method named my_each that
# takes a block, calls the block on every element of the array,
# and returns the original array. Do not use Enumerable's each
# method. I want to be able to write:

# calls my_each twice on the array, printing all the numbers twice.


2.# My Select
# Now extend the Array class to include my_select that takes a block and returns a 
# new array containing only elements that satisfy the block. Use your my_each method!

3. My Reject
Write my_reject to take a block and return a new array excluding elements that 
satisfy the block.

My Any
Write my_any? to return true if any elements of the array satisfy the block and 
my_all? to return true only if all elements satisfy the block.


my_flatten should return all elements of the array into a new, one-dimensional 
array. Hint: use recursion!

My Zip
Write my_zip to take any number of arguments. It should return a new array containing 
self.length elements. Each element of the new array should be an array with a length 
of the input arguments + 1 and contain the merged elements at that index. If the 
size of any argument is less than self, nil is returned for that location.

My Rotate
Write a method my_rotate that returns a new array containing all the elements of the original array in a rotated order. By default, the array should rotate by one element. If a negative value is given, the array is rotated in the opposite direction.

My Join
my_join returns a single string containing all the elements of the array, 
separated by the given string separator. If no separator is given, an empty 
string is used.

My Reverse
Write a method that returns a new array containing all the elements of the original array in reverse order.

Example:

[ "a", "b", "c" ].my_reverse   #=> ["c", "b", "a"]
[ 1 ].my_reverse               #=> [1]