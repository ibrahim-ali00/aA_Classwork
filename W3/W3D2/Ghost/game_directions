Game
#initialize
Assign instance variables for the players, fragment, and dictionary. Since we'll 
be checking the fragment for inclusion in the dictionary, we'll want to use a 
data structure with fast lookup: a Hash or Set would be ideal. You can use this 
file to populate your dictionary; it contains only words three letters or longer 
(otherwise we wouldn't have a very interesting game).

ðŸ’¡ NOTE: Using a Hash or a Set instead of an Array to store our dictionary 
allows us to very quickly check if the fragment is included in the dictionary. 
In fact, the amount of time it would take to see if the fragment was included 
would be independent of how long the dictionary is because these data structures 
don't require you to examine every element when you are checking for inclusion. 
If we stored the dictionary just as an array of strings, using the Array#include? 
method would take longer as our array of got longer. Keep in mind that when you 
are then checking to see if there are any words in the dictionary that can be 
created by adding another letter to the fragment in your valid_play? method, 
you are potentially looking at every word in the dictionary. Therefore, this 
operation will not be speed-boosted by our use of a Set or Hash.

#play_round
The core game logic lives here. I wrote a number of helper methods to keep things 
clean:

#current_player
#previous_player
#next_player!: updates the current_player and previous_player

#take_turn(player): gets a string from the player until a valid play is made; 
then updates the fragment and checks against the dictionary. 
You may also want to alert the player if they attempt to make an invalid 
move (or, if you're feeling mean, you might cause them to lose outright).

#valid_play?(string): Checks that string is a letter of the alphabet and 
that there are words we can spell after adding it to the fragment

Player
I wrote initialize, guess, and alert_invalid_guess methods. 
You'll probably want each Player to have a name, as well.